# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11pnkKRi7tvzC5xk9U_E598EmRnXF9f-B
"""

# Step 1: Import necessary libraries
import numpy as np
import pandas as pd
from sklearn import datasets
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, accuracy_score

# Step 2: Load the Iris dataset
iris = datasets.load_iris()

# Convert the dataset to a pandas DataFrame for better visualization (optional)
iris_df = pd.DataFrame(data=np.c_[iris['data'], iris['target']],
                       columns=iris['feature_names'] + ['target'])
print("Iris Dataset Sample:")
print(iris_df.head())  # Display the first few rows

# Step 3: Define the features (X) and target (y)
X = iris.data  # Features: sepal length, sepal width, petal length, petal width
y = iris.target  # Labels: 0 - Setosa, 1 - Versicolour, 2 - Virginica

# Step 4: Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 5: Standardize the features (scaling the data)
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Step 6: Train a machine learning model (Logistic Regression in this case)
log_reg = LogisticRegression()
log_reg.fit(X_train, y_train)

# Step 7: Make predictions on the test data
y_pred = log_reg.predict(X_test)

# Step 8: Evaluate the model's performance
print("\nClassification Report:")
print(classification_report(y_test, y_pred))

print("Accuracy Score:")
print(accuracy_score(y_test, y_pred))